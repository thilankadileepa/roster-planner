/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.nurserostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import java.time.DayOfWeek;
import org.demo.rostering.domain.Employee;
import org.demo.rostering.domain.ShiftAssignment;
import org.demo.rostering.domain.EmployeeRoster;
import org.demo.rostering.domain.NurseRosterParametrization;
import org.demo.rostering.domain.Shift;
import org.demo.rostering.domain.ShiftDate;
import org.demo.rostering.domain.ShiftType;
import org.demo.rostering.domain.ShiftTypeSkillRequirement;
import org.demo.rostering.domain.Skill;
import org.demo.rostering.domain.SkillProficiency;
import org.demo.rostering.domain.WeekendDefinition;
import org.demo.rostering.domain.pattern.FreeBefore2DaysWithAWorkDayPattern;
import org.demo.rostering.domain.pattern.Pattern;
import org.demo.rostering.domain.pattern.ShiftType2DaysPattern;
import org.demo.rostering.domain.pattern.ShiftType3DaysPattern;
import org.demo.rostering.domain.pattern.WorkBeforeFreeSequencePattern;
import org.demo.rostering.domain.contract.Contract;
import org.demo.rostering.domain.contract.BooleanContractLine;
import org.demo.rostering.domain.contract.ContractLine;
import org.demo.rostering.domain.contract.ContractLineType;
import org.demo.rostering.domain.contract.MinMaxContractLine;
import org.demo.rostering.domain.contract.PatternContractLine;
import org.demo.rostering.domain.request.DayOffRequest;
import org.demo.rostering.domain.request.DayOnRequest;
import org.demo.rostering.domain.request.ShiftOffRequest;
import org.demo.rostering.domain.request.ShiftOnRequest;
import org.demo.rostering.domain.drools.EmployeeConsecutiveAssignmentEnd;
import org.demo.rostering.domain.drools.EmployeeConsecutiveAssignmentStart;
import org.demo.rostering.domain.drools.EmployeeConsecutiveWeekendAssignmentEnd;
import org.demo.rostering.domain.drools.EmployeeConsecutiveWeekendAssignmentStart;
import org.demo.rostering.domain.drools.EmployeeFreeSequence;
import org.demo.rostering.domain.drools.EmployeeWeekendSequence;
import org.demo.rostering.domain.drools.EmployeeWorkSequence;
import org.demo.rostering.domain.Type;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Resource cannot do a Morning roster the day immediately following their work on an Evening roster.
rule "noMorningAfterEvening"
    when
        ShiftAssignment($leftId : id, $employee : employee, $shiftDate : shiftDate, $type : type, employee != null)
        ShiftAssignment(employee == $employee, $shiftDate.dateDiff(shiftDate)==1, ($type==Type.E && type==Type.M), id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Resource cannot work more than 3 consecutive Sundays
rule "noThreeConsecutiveSundays"
    when
        ShiftAssignment(
            $employee : employee, $firstDayIndex : shiftDateDayIndex, sunday==true
        )
        ShiftAssignment(
            employee == $employee,
            shiftDateDayIndex == ($firstDayIndex + 7),
            sunday==true
        )
        ShiftAssignment(
            employee == $employee,
            shiftDateDayIndex == ($firstDayIndex + 14),
            sunday==true
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "Minimum and maximum number of assignments"
        salience 1 // Do these rules first (optional, for performance)
    when
        $contractLine : MinMaxContractLine(contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, enabled == true,
            $contract : contract)
        $employee : Employee(contract == $contract)
        accumulate(
            $assignment : ShiftAssignment(employee == $employee);
            $total : count($assignment)
        )
    then
        int totalInt = $total.intValue();
        if ($contractLine.isMinimumEnabled() && totalInt < $contractLine.getMinimumValue()) {
            scoreHolder.addSoftConstraintMatch(kcontext,
                    (totalInt - $contractLine.getMinimumValue()) * $contractLine.getMinimumWeight());
        } else if ($contractLine.isMaximumEnabled() && totalInt > $contractLine.getMaximumValue()) {
            scoreHolder.addSoftConstraintMatch(kcontext,
                    ($contractLine.getMaximumValue() - totalInt) * $contractLine.getMaximumWeight());
        } else {
            // Workaround for https://issues.redhat.com/browse/PLANNER-761
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end

rule "insertEmployeeConsecutiveAssignmentStart"
        salience 2 // Do these rules first (optional, for performance)
    when
        ShiftAssignment(
            $employee : employee, employee != null,
            $dayIndex : shiftDateDayIndex,
            $shiftDate : shiftDate
        )
        // The first day has no working day before it
        not ShiftAssignment(employee == $employee, shiftDateDayIndex == ($dayIndex - 1))
    then
        insertLogical(new EmployeeConsecutiveAssignmentStart($employee, $shiftDate));
end
rule "insertEmployeeConsecutiveAssignmentEnd"
        salience 2 // Do these rules first (optional, for performance)
    when
        ShiftAssignment(
            $employee : employee, employee != null,
            $dayIndex : shiftDateDayIndex,
            $shiftDate : shiftDate
        )
        // The last day has no working day after it
        not ShiftAssignment(employee == $employee, shiftDateDayIndex == ($dayIndex + 1))
    then
        insertLogical(new EmployeeConsecutiveAssignmentEnd($employee, $shiftDate));
end

rule "insertEmployeeWorkSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        EmployeeConsecutiveAssignmentStart(
            $employee : employee,
            $firstDayIndex : shiftDateDayIndex
        )

        EmployeeConsecutiveAssignmentEnd(
            employee == $employee,
            shiftDateDayIndex >= $firstDayIndex,
            $lastDayIndex : shiftDateDayIndex
        )

        // There are no free days between the first and last day
        not EmployeeConsecutiveAssignmentEnd(
            employee == $employee,
            shiftDateDayIndex >= $firstDayIndex && < $lastDayIndex
        )
    then
        insertLogical(new EmployeeWorkSequence($employee, $firstDayIndex, $lastDayIndex));
end

// Resource cannot work more than 10 consecutive days in a row.
// Maximum number of consecutive working days
rule "maximumConsecutiveWorkingDays"
    when
        EmployeeWorkSequence(
            dayLength >= 10
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Requested day on/off
rule "dayOffRequest"
    when
        DayOffRequest($employee : employee, $shiftDate : shiftDate, $weight : weight)
        ShiftAssignment(employee == $employee, shiftDate == $shiftDate)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/*
// Max Dates for the period
rule "maxDatesForPeriod"
    salience 1
  when
    ShiftAssignment(
        $employee : employee,
        $shiftDate : shiftDate
    )
    accumulate(
        $assignment : ShiftAssignment(employee == $employee, shiftDate != $shiftDate);
        $total : count($assignment)
    )
  then
        int totalInt = $total.intValue();
        if(totalInt > 210) {
            scoreHolder.addHardConstraintMatch(kcontext, -1);
        }
end
*/

// ############################################################################
// Soft constraints
// ############################################################################

// The number of Weekends worked (a weekend is Saturday and Sunday)
rule "Fairness: all employees should work about the same number of shifts in weekends"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e, weekend==true);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Negative to balance it across employees
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end

// The number of mornings worked.
rule "Fairness: all employees should work about the same number of morning shifts"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e, type==Type.M);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Negative to balance it across employees
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end

// The number of evenings worked.
rule "Fairness: all employees should work about the same number of evening shifts"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e, type==Type.E);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Negative to balance it across employees
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end

// Hours worked Per Year - This is equivalent to fairness in shifts because all the shifts has same number of hours
rule "Fairness: all employees should work about the same number of shifts"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        // Negative to balance it across employees
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end
